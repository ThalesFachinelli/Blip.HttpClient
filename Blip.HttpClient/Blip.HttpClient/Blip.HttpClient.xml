<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blip.HttpClient</name>
    </assembly>
    <members>
        <member name="M:Blip.HttpClient.Extensions.ServiceCollectionExtensions.DefaultRegister(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Collections.Generic.List{Lime.Protocol.Document})">
            <summary>
            Updates the ServiceCollection with any custom documents and BLiP's extensions
            </summary>
            <param name="services"></param>
            <param name="authKey"></param>
            <param name="documentList"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipHttpClientFactory.BuildServiceCollection(System.String,System.Collections.Generic.List{Lime.Protocol.Document},Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates or updates a Service Collection to include BLiP's extensions and any custom Documents
            </summary>
            <param name="authKey"></param>
            <param name="documents"></param>
            <param name="serviceCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipHttpClientFactory.BuildBlipHttpClient(System.String,Lime.Protocol.Serialization.IDocumentTypeResolver)">
            <summary>
            Builds an ISender using the given auth key and custom documents previously set
            </summary>
            <param name="authKey"></param>
            <param name="documentTypeResolver"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipHttpClientFactory.BuildBlipHttpClient(System.String)">
            <summary>
            Builds an ISender using the given auth key
            </summary>
            <param name="authKey"></param>
            <returns></returns>
        </member>
        <member name="T:Blip.HttpClient.Services.ContactService">
            <summary>
            Http Abstraction of BLiP's /contact URI
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.ContactService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            Creates a ContactService instance to Get and Set contacts
            </summary>
            <param name="sender">ISender instance, from BlipHttpClientFactory</param>
        </member>
        <member name="M:Blip.HttpClient.Services.ContactService.#ctor(System.String)">
            <summary>
            Creates a ContactService instance to Get and Set contacts using a given authKey.
            </summary>
            <param name="authKey">Bot authorization key</param>
        </member>
        <member name="M:Blip.HttpClient.Services.ContactService.GetContactAsync(System.String,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Gets the Bot's Contact using the <paramref name="identifier"/> param
            </summary>
            <param name="identifier">User identifier whose contact must be recovered</param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Contact</c> response object</returns>
            <example>
            <code>
            Contact x = await _contactService.GetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.ContactService.SetContactAsync(Lime.Messaging.Resources.Contact,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Sets the <paramref name="contact"/> on the Bot's agenda
            </summary>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Command</c> response object</returns>
            <example>
            <code>
            Command x = await _contactService.SetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.IContactService">
            <summary>
            Http Abstraction of BLiP's /contact URI
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.IContactService.GetContactAsync(System.String,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Gets the Bot's Contact using the <paramref name="identifier"/> param
            </summary>
            <param name="identifier">User identifier whose contact must be recovered</param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Contact</c> response object</returns>
            <example>
            <code>
            Contact x = await _contactService.GetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.IContactService.SetContactAsync(Lime.Messaging.Resources.Contact,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Sets the <paramref name="contact"/> on the Bot's agenda
            </summary>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Command</c> response object</returns>
            <example>
            <code>
            Command x = await _contactService.SetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
    </members>
</doc>
